import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as t,b as a,o as n}from"./app-D7gfXBqy.js";const p="/image/jvm/jvm1.png",o="/image/jvm/jvm2.png",l="/image/jvm/jvm3.png",r="/image/jvm/jvm4.png",s="/image/jvm/jvm5.png",g="/image/jvm/jvm6.png",m="/image/jvm/jvm7.png",c="/image/jvm/jvm8.png",h="/image/jvm/jvm0.png",v={},d=a('<h1 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm"><span>JVM</span></a></h1><h2 id="一、什么是jvm" tabindex="-1"><a class="header-anchor" href="#一、什么是jvm"><span>一、什么是JVM</span></a></h2><p>JVM 全称是 Java Virtual Machine，中文译名 Java虚拟机。JVM 本质上是一个运行在计算机上的程序，他的职责是运行Java字节码文件。</p><p>Java源代码执行流程如下：</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',5),u=a('<div class="hint-container tip"><p class="hint-container-title">分为三个步骤：</p><p>1、编写Java源代码文件。</p><p>2、使用Java编译器（javac命令）将源代码编译成Java字节码文件。</p><p>3、使用Java虚拟机加载并运行Java字节码文件，此时会启动一个新的进程。</p></div><div class="hint-container important"><p class="hint-container-title">JVM的功能</p><ul><li>1 解释和运行</li><li>2 内存管理</li><li>3 即时编译</li></ul></div><h3 id="_1、-解释和运行" tabindex="-1"><a class="header-anchor" href="#_1、-解释和运行"><span>1、 解释和运行</span></a></h3><p><strong>对字节码文件中的指令，实时的解释成机器码，让计算机执行。</strong></p><p>字节码文件中包含了字节码指令，计算器无法直接执行，Java虚拟机会将字节码文件中的字节码指令实时地解释成机器码，机器码是计算机可以运行的指令。</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2、内存管理" tabindex="-1"><a class="header-anchor" href="#_2、内存管理"><span>2、内存管理</span></a></h3><ul><li>自动为对象、方法等分配内存</li><li>自动的垃圾回收机制，回收不再使用的对象</li></ul><p>Java虚拟机会帮助程序员为对象分配内存，同时将不用的对象使用垃圾回收器回收掉，这是对比C和C++这些语言的一个优势。在C/C++语言中，对象的回收需要程序员手动去编写代码完成，如果遗漏了这段删除对象的代码，这个对象就会永远占用内存空间，不会再回收。所以JVM的这个功能降低了程序员编写代码的难度。</p><h3 id="_3、-即时编译" tabindex="-1"><a class="header-anchor" href="#_3、-即时编译"><span>3、 即时编译</span></a></h3><p>对热点代码进行优化，提升执行效率。即时编译可以说是提升Java程序性能最核心的手段。</p><h3 id="_4、java性能低的主要原因和跨平台特性" tabindex="-1"><a class="header-anchor" href="#_4、java性能低的主要原因和跨平台特性"><span>4、Java性能低的主要原因和跨平台特性</span></a></h3><p>Java语言如果不做任何的优化，性能其实是不如C和C++语言的。主要原因是：</p><p>在程序运行过程中，<strong>Java虚拟机需要将字节码指令实时地解释成计算机能识别的机器码，这个过程在运行时可能会反复地执行，所以效率较低。</strong></p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>C和C++语言在执行过程中，只需要将源代码编译成可执行文件，就包含了计算机能识别的机器码，无需在运行过程中再实时地解释，所以性能较高。</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>Java为什么要选择一条执行效率比较低的方式呢？</strong></p><p>主要是为了<strong>实现跨平台的特性</strong>。Java的字节码指令，如果希望在不同平台（操作系统+硬件架构），比如在windows或者linux上运行。可以使用同一份字节码指令，交给windows和linux上的Java虚拟机进行解释，这样就可以获得不同平台上的机器码了。这样就实现了<code>Write Once</code>，<code>Run Anywhere </code>编写一次，到处运行 的目标。</p><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>但是C/C++语言，如果要让程序在不同平台上运行，就需要将一份源代码在不同平台上分别进行编译，相对来说比较麻烦。</p><p>再回到即时编译，在JDK1.1的版本中就推出了即时编译去优化对应的性能。</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>虚拟机在运行过程中如果发现某一个方法甚至是循环是热点代码（被非常高频调用），即时编译器会优化这段代码并将优化后的机器码保存在内存中，如果第二次再去执行这段代码。Java虚拟机会将机器码从内存中取出来直接进行调用。这样节省了一次解释的步骤，同时执行的是优化后的代码，效率较高。</p><p><strong>Java通过即时编译器获得了接近C/C++语言的性能，在某些特定的场景下甚至可以实现超越。</strong></p><h2 id="二、常见的jvm" tabindex="-1"><a class="header-anchor" href="#二、常见的jvm"><span>二、常见的JVM</span></a></h2><h3 id="_1、-java虚拟机规范" tabindex="-1"><a class="header-anchor" href="#_1、-java虚拟机规范"><span>1、 Java虚拟机规范</span></a></h3><ul><li>《Java虚拟机规范》由Oracle制定，内容主要包含了Java虚拟机在设计和实现时需要遵守的规范，主要包含class字节码文件的定义、类和接口的加载和初始化、指令集等内容。</li><li>《Java虚拟机规范》是对虚拟机设计的要求，而不是对Java设计的要求，也就是说虚拟机可以运行在其他的语言比如Groovy、Scala生成的class字节码文件之上。</li><li><a href="https://docs.oracle.com/javase/specs/index.html" target="_blank" rel="noopener noreferrer">官网地址</a></li></ul><h3 id="_2、-java虚拟机规范" tabindex="-1"><a class="header-anchor" href="#_2、-java虚拟机规范"><span>2、 Java虚拟机规范</span></a></h3><p>平时我们最常用的，就是Hotspot虚拟机。</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3、-hotspot的发展历程" tabindex="-1"><a class="header-anchor" href="#_3、-hotspot的发展历程"><span>3、 HotSpot的发展历程</span></a></h3><ul><li>初出茅庐 - 1999年4月</li></ul><p>源自1997年收购的SmallTalk语言的虚拟机，HotSpot虚拟机初次在JDK中使用。在JDK1.2中作为附加功能存在，JDK1.3之后作为默认的虚拟机。</p><ul><li>野蛮生长 - 2006年12月</li></ul><p>JDK 6发布，并在虚拟机层面做了大量的优化，这些优化对后续虚拟机的发展产生了深远的影响。</p><ul><li>稳步前进 - 2009-2013</li></ul><p>JDK7中首次推出了G1垃圾收集器。收购了Sun公司之后，吸纳了JRockIt虚拟机的一些设计思想，JDK8中引入了JMC等工具，去除了永久代。</p><ul><li>百家争鸣 - 2018-2019</li></ul><p>JDK11优化了G1垃圾收集器的性能,同时推出了ZGC新一代的垃圾回收器，JDK12推出Shenan-doah垃圾回收器。</p><ul><li>拥抱云原生 - 2019-至今</li></ul><p>以Hotspot为基础的GraalVM虚拟机诞生，不仅让解决了单体应用中多语言整合的难题，同时也提升了这些语言运行时的效率。极高的性能、极快的启动速度也更适用于当下的云原生架构。</p><h2 id="三、-java虚拟机的组成" tabindex="-1"><a class="header-anchor" href="#三、-java虚拟机的组成"><span>三、 Java虚拟机的组成</span></a></h2><p>Java虚拟机主要分为以下几个组成部分：</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>类加载子系统：核心组件类加载器，负责将字节码文件中的内容加载到内存中。</li><li>运行时数据区：JVM管理的内存，创建出来的对象、类的信息等等内容都会放在这块区域中。</li><li>执行引擎：包含了即时编译器、解释器、垃圾回收器，执行引擎使用解释器将字节码指令解释成机器码，使用即时编译器优化性能，使用垃圾回收器回收不再使用的对象。</li><li>本地接口：调用本地使用C/C++编译好的方法，本地方法在Java中声明时，都会带上native关键字，如下图所示。</li></ul><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',47);function j(J,_){return n(),e("div",null,[d,t(" more "),u])}const x=i(v,[["render",j],["__file","index.html.vue"]]),y=JSON.parse('{"path":"/posts/%E5%90%8E%E7%AB%AF/Java/","title":"JVM","lang":"zh-CN","frontmatter":{"title":"JVM","date":"2024-09-08T16:24:22.000Z","tags":"java","category":"Java","description":"jvm","icon":"/img/JVM.svg","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E5%90%8E%E7%AB%AF/Java/"}],["meta",{"property":"og:site_name","content":"Lance"}],["meta",{"property":"og:title","content":"JVM"}],["meta",{"property":"og:description","content":"jvm"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/image\\\\jvm\\\\jvm1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-08T08:01:25.000Z"}],["meta",{"property":"article:author","content":"RuyiWei"}],["meta",{"property":"article:published_time","content":"2024-09-08T16:24:22.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-08T08:01:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM\\",\\"image\\":[\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm1.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm2.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm3.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm4.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm5.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm6.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm7.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm8.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm0.png\\"],\\"datePublished\\":\\"2024-09-08T16:24:22.000Z\\",\\"dateModified\\":\\"2024-09-08T08:01:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"RuyiWei\\"}]}"]]},"headers":[{"level":2,"title":"一、什么是JVM","slug":"一、什么是jvm","link":"#一、什么是jvm","children":[{"level":3,"title":"1、 解释和运行","slug":"_1、-解释和运行","link":"#_1、-解释和运行","children":[]},{"level":3,"title":"2、内存管理","slug":"_2、内存管理","link":"#_2、内存管理","children":[]},{"level":3,"title":"3、 即时编译","slug":"_3、-即时编译","link":"#_3、-即时编译","children":[]},{"level":3,"title":"4、Java性能低的主要原因和跨平台特性","slug":"_4、java性能低的主要原因和跨平台特性","link":"#_4、java性能低的主要原因和跨平台特性","children":[]}]},{"level":2,"title":"二、常见的JVM","slug":"二、常见的jvm","link":"#二、常见的jvm","children":[{"level":3,"title":"1、 Java虚拟机规范","slug":"_1、-java虚拟机规范","link":"#_1、-java虚拟机规范","children":[]},{"level":3,"title":"2、 Java虚拟机规范","slug":"_2、-java虚拟机规范","link":"#_2、-java虚拟机规范","children":[]},{"level":3,"title":"3、 HotSpot的发展历程","slug":"_3、-hotspot的发展历程","link":"#_3、-hotspot的发展历程","children":[]}]},{"level":2,"title":"三、 Java虚拟机的组成","slug":"三、-java虚拟机的组成","link":"#三、-java虚拟机的组成","children":[]}],"git":{"createdTime":1719643575000,"updatedTime":1725782485000,"contributors":[{"name":"weiruyi","email":"1581778251@qq.com","commits":4}]},"readingTime":{"minutes":5.6,"words":1680},"filePathRelative":"posts/后端/Java/README.md","localizedDate":"2024年9月8日","excerpt":"\\n<h2>一、什么是JVM</h2>\\n<p>JVM 全称是 Java Virtual Machine，中文译名 Java虚拟机。JVM 本质上是一个运行在计算机上的程序，他的职责是运行Java字节码文件。</p>\\n<p>Java源代码执行流程如下：</p>\\n<figure><img src=\\"/image\\\\jvm\\\\jvm1.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n"}');export{x as comp,y as data};
