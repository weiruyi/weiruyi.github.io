import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a,e,b as t,o as p}from"./app-IxkzwU3A.js";const r="/image/jvm/jvm74.png",s="/image/jvm/jvm75.png",o="/image/jvm/jvm76.png",g="/image/jvm/jvm77.png",c="/image/jvm/jvm78.png",d="/image/jvm/jvm79.png",m="/image/jvm/jvm80.png",u="/image/jvm/jvm81.png",v="/image/jvm/jvm82.png",h="/image/jvm/jvm83.png",f="/image/jvm/jvm84.png",i="/image/jvm/jvm85.png",b="/image/jvm/jvm86.png",_="/image/jvm/jvm87.png",C="/image/jvm/jvm88.png",G="/image/jvm/jvm89.png",S={},j=e("h1",{id:"垃圾回收",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#垃圾回收"},[e("span",null,"垃圾回收")])],-1),y=e("h2",{id:"一、方法区回收",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#一、方法区回收"},[e("span",null,"一、方法区回收")])],-1),x=e("p",null,"方法区中能回收的内容主要就是不再使用的类。",-1),R=e("p",null,"判定一个类可以被卸载。需要同时满足下面三个条件：",-1),P=e("p",null,"1、此类所有实例对象都已经被回收，在堆中不存在任何该类的实例对象以及子类对象。",-1),M=e("p",null,"2、加载该类的类加载器已经被回收。",-1),T=e("p",null,"3、该类对应的 java.lang.Class 对象没有在任何地方被引用。",-1),X=t('<div class="hint-container info"><p class="hint-container-title">那么类卸载主要用在什么场景下呢？</p><p>开发中此类场景一般很少出现，主要在如 OSGi、JSP 的热部署等应用场景中。</p><p>每个jsp文件对应一个唯一的类加载器，当一个jsp文件修改了，就直接卸载这个jsp类加载器。重新创建类加载器，重新加载jsp文件。</p></div><h2 id="二、如何判断对象可以回收" tabindex="-1"><a class="header-anchor" href="#二、如何判断对象可以回收"><span>二、如何判断对象可以回收</span></a></h2><p>垃圾回收器要回收对象的第一步就是判断哪些对象可以回收。Java中的对象是否能被回收，是根据对象是否被引用来决定的。如果对象被引用了，说明该对象还在使用，不允许被回收。</p><p>判断对象是否可以回收，主要有两种方式：引用计数法和可达性分析法。</p><h3 id="_1、引用计数法" tabindex="-1"><a class="header-anchor" href="#_1、引用计数法"><span>1、引用计数法</span></a></h3><p>引用计数法会为每个对象维护一个引用计数器，当对象被引用时加1，取消引用时减1。</p><p>比如下图中，对象A的计数器初始为0，局部变量a1对它引用之后，计数器加1就变成了1。同样A对B产生了引用，B的计数器也是1。</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>引用计数法的优点是实现简单，C++中的智能指针就采用了引用计数法，但是它也存在缺点。</p><div class="hint-container tip"><p class="hint-container-title">缺点</p><p>1.每次引用和取消引用都需要维护计数器，对系统性能会有一定的影响</p><p>2.存在循环引用问题，所谓循环引用就是当A引用B，B同时引用A时会出现对象无法回收的问题。</p></div><h3 id="_2、可达性分析法" tabindex="-1"><a class="header-anchor" href="#_2、可达性分析法"><span>2、可达性分析法</span></a></h3><p>Java使用的是可达性分析算法来判断对象是否可以被回收。可达性分析将对象分为两类：<strong>垃圾回收的根对象（GC Root）<strong>和</strong>普通对象</strong>，对象与对象之间存在引用关系。</p><p>下图中A到B再到C和D，形成了一个引用链，可达性分析算法指的是如果从某个到GC Root对象是可达的，对象就不可被回收。</p><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container tip"><p class="hint-container-title">哪些对象被称之为GC Root对象呢？</p><ul><li><p>线程Thread对象，引用线程栈帧中的方法参数、局部变量等。</p></li><li><p>系统类加载器加载的java.lang.Class对象，引用类中的静态变量。</p></li><li><p>监视器对象，用来保存同步锁synchronized关键字持有的对象。</p></li><li><p>本地方法调用时使用的全局对象。</p></li></ul></div><h3 id="_3、常见的引用对象" tabindex="-1"><a class="header-anchor" href="#_3、常见的引用对象"><span>3、常见的引用对象</span></a></h3><p>可达性算法中描述的对象引用，一般指的是<strong>强引用</strong>，即是GCRoot对象对普通对象有引用关系，<strong>只要这层关系存在，普通对象就永远不会被回收</strong>。除了强引用之外，Java中还设计了几种其他引用方式：</p><ul><li>软引用</li><li>弱引用</li><li>虚引用</li><li>终结器引用</li></ul><h4 id="_1-软引用" tabindex="-1"><a class="header-anchor" href="#_1-软引用"><span><strong>1）软引用</strong></span></a></h4><p>软引用相对于强引用是一种比较弱的引用关系，如果一个对象只有软引用关联到它，当程序内存不足时，就会将软引用中的数据进行回收。在JDK 1.2版之后提供了SoftReference类来实现软引用，软引用常用于缓存中。</p><p>如下图中，对象A被GC Root对象强引用了，同时我们创建了一个软引用SoftReference对象（它本身也是一个对象），软引用对象中引用了对象A。</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接下来强引用被去掉之后，对象A暂时还是处于不可回收状态，因为有软引用存在并且内存还够用。</p><figure><img src="'+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果内存出现不够用的情况，对象A就处于可回收状态，可以被垃圾回收器回收。</p><p><strong>这样做有什么好处？</strong></p><ul><li>如果对象A是一个缓存，平时会保存在内存中，如果想访问数据可以快速访问。但是如果内存不够用了，我们就可以将这部分缓存清理掉释放内存。即便缓存没了，也可以从数据库等地方获取数据，不会影响到业务正常运行，这样可以减少内存溢出产生的可能性。</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>软引用对象本身，也需要被强引用，否则软引用对象也会被回收掉。</p></div><p><strong>软引用的使用方法</strong></p><p>软引用的执行过程如下：</p><p>1.将对象使用软引用包装起来，new SoftReference&lt;对象类型&gt;(对象)。</p><p>2.内存不足时，虚拟机尝试进行垃圾回收。</p><p>3.如果垃圾回收仍不能解决内存不足的问题，回收软引用中的对象。</p><p>4.如果依然内存不足，抛出OutOfMemory异常。</p><p>代码：</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>/**
 * 软引用案例2 - 基本使用
 */
public class SoftReferenceDemo2 {
    public static void main(String[] args) throws IOException {

        byte[] bytes = new byte[1024 * 1024 * 100];
        SoftReference&lt;byte[]&gt; softReference = new SoftReference&lt;byte[]&gt;(bytes);
        bytes = null;
        System.out.println(softReference.get());

        byte[] bytes2 = new byte[1024 * 1024 * 100];
        System.out.println(softReference.get());
//
//        byte[] bytes3 = new byte[1024 * 1024 * 100];
//        softReference = null;
//        System.gc();
//
//        System.in.read();
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加虚拟机参数，限制最大堆内存大小为200m：<code>-Xmx200m</code></p><p>执行后发现，第二个100m对象创建之后需，软引用中包含的对象已经被回收了。</p><p><strong>软引用对象本身怎么回收呢？</strong></p><p>如果软引用对象里边包含的数据已经被回收了，那么软引用对象本身其实也可以被回收了。</p><p>SoftReference提供了一套队列机制：</p><p>1、软引用创建时，通过构造器传入引用队列</p><p>2、在软引用中包含的对象被回收时，该软引用对象会被放入引用队列</p><p>3、通过代码遍历引用队列，将SoftReference的强引用删除</p><p>代码</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>/**
 * 软引用案例3 - 引用队列使用
 */
public class SoftReferenceDemo3 {

    public static void main(String[] args) throws IOException {

        ArrayList&lt;SoftReference&gt; softReferences = new ArrayList&lt;&gt;();
        ReferenceQueue&lt;byte[]&gt; queues = new ReferenceQueue&lt;byte[]&gt;();
        for (int i = 0; i &lt; 10; i++) {
            byte[] bytes = new byte[1024 * 1024 * 100];
            SoftReference studentRef = new SoftReference&lt;byte[]&gt;(bytes,queues);
            softReferences.add(studentRef);
        }

        SoftReference&lt;byte[]&gt; ref = null;
        int count = 0;
        while ((ref = (SoftReference&lt;byte[]&gt;) queues.poll()) != null) {
            count++;
        }
        System.out.println(count);

    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终展示的结果是：9</p><p>这9个软引用对象中包含的数据已经被回收掉，所以可以手动从ArrayList中去掉，这样就可以释放这9个对象。</p><h4 id="_2-弱引用" tabindex="-1"><a class="header-anchor" href="#_2-弱引用"><span>2）弱引用</span></a></h4><p>弱引用的整体机制和软引用基本一致，区别在于弱引用包含的对象在垃圾回收时，<strong>不管内存够不够都会直接被回收</strong>。在JDK 1.2版之后提供了WeakReference类来实现弱引用，弱引用主要在ThreadLocal中使用。</p><h4 id="_3-虚引用和终结器引用" tabindex="-1"><a class="header-anchor" href="#_3-虚引用和终结器引用"><span>3）虚引用和终结器引用</span></a></h4><p>这两种引用在常规开发中是不会使用的。</p><ul><li><p>虚引用也叫幽灵引用/幻影引用，不能通过虚引用对象获取到包含的对象。<strong>虚引用唯一的用途是当对象被垃圾回收器回收时可以接收到对应的通知</strong>。Java中使用PhantomReference实现了虚引用，直接内存中为了及时知道直接内存对象不再使用，从而回收内存，使用了虚引用来实现。</p></li><li><p>终结器引用指的是 <strong>在对象需要被回收时，终结器引用会关联对象并放置在Finalizer类中的引用队列中，在稍后由一条由FinalizerThread线程从队列中获取对象，然后执行对象的finalize方法，在对象第二次被回收时，该对象才真正的被回收。</strong> 在这个过程中可以在finalize方法中再将自身对象使用强引用关联上，但是不建议这样做。</p></li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在<strong>可达性分析算法判定为不可达时，对象并不是一定会回收</strong>，会经历两次标记过程：</p><ul><li>1、判定为不可达，进行第一次标记</li><li>2、筛选是否有必要执行finalize()方法，没有必要执行的情况： <ul><li>对象没有覆盖finalize()方法</li><li>finalize()方法已经被虚拟机调用过(<strong>任何一个对象的finalize()方法都只会被系统自动调动一次</strong>)</li></ul></li><li>3、如果有必要执行，会放置在F-Queue队列中，并在稍后自动执行他们的finalize()方法</li><li>4、如果没有必要执行或者执行finalize()自救失败，第二次标记，将被回收</li></ul></div><h2 id="三、垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#三、垃圾回收算法"><span>三、垃圾回收算法</span></a></h2><p>简单来说，垃圾回收要做的有两件事：</p><p>1、找到内存中存活的对象</p><p>2、释放不再存活对象的内存，使得程序能再次利用这部分空间</p><h3 id="_1、垃圾回收算法的评价标准" tabindex="-1"><a class="header-anchor" href="#_1、垃圾回收算法的评价标准"><span>1、垃圾回收算法的评价标准</span></a></h3><p>Java垃圾回收过程会通过单独的GC线程来完成，但是不管使用哪一种GC算法，都会有部分阶段需要停止所有的用户线程。这个过程被称之为Stop The World简称STW，如果STW时间过长则会影响用户的使用。</p><p>如下图，用户代码执行和垃圾回收执行让用户线程停止执行（STW）是交替执行的。</p><figure><img src="`+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>所以判断GC算法是否优秀，可以从三个方面来考虑：</p><p><strong>1.吞吐量</strong></p><p>吞吐量指的是 CPU 用于执行用户代码的时间与 CPU 总执行时间的比值，即吞吐量 = 执行用户代码时间 /（执行用户代码时间 + GC时间）。吞吐量数值越高，垃圾回收的效率就越高。</p><p><strong>2.最大暂停时间</strong></p><p>最大暂停时间指的是所有在垃圾回收过程中的STW时间最大值。比如如下的图中，黄色部分的STW就是最大暂停时间，显而易见上面的图比下面的图拥有更少的最大暂停时间。最大暂停时间越短，用户使用系统时受到的影响就越短。</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>3.堆使用效率</strong></p><p>不同垃圾回收算法，对堆内存的使用方式是不同的。比如标记清除算法，可以使用完整的堆内存。而复制算法会将堆内存一分为二，每次只能使用一半内存。从堆使用效率上来说，标记清除算法要优于复制算法。</p><p>上述三种评价标准：堆使用效率、吞吐量，以及最大暂停时间不可兼得。<strong>一般来说，堆内存越大，最大暂停时间就越长</strong>。想要减少最大暂停时间，就会降低吞吐量。</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2、标记清除算法" tabindex="-1"><a class="header-anchor" href="#_2、标记清除算法"><span>2、标记清除算法</span></a></h3><p>标记清除算法的核心思想分为两个阶段：</p><p>1.标记阶段，将所有存活的对象进行标记。Java中使用可达性分析算法，从GC Root开始通过引用链遍历出所有存活对象。</p><p>2.清除阶段，从内存中删除没有被标记也就是非存活对象。</p><div class="hint-container tip"><p class="hint-container-title">优缺点</p><ul><li><p>优点：实现简单，只需要在第一阶段给每个对象维护标志位，第二阶段删除对象即可。</p></li><li><p>缺点：</p><ul><li>1.碎片化问题,由于内存是连续的，所以在对象被删除之后，内存中会出现很多细小的可用内存单元。如果我们需要的是一个比较大的空间，很有可能这些内存单元的大小过小无法进行分配。</li><li>2.分配速度慢。由于内存碎片的存在，需要维护一个空闲链表，极有可能发生每次需要遍历到链表的最后才能获得合适的内存空间</li></ul></li></ul></div><h3 id="_3、复制算法" tabindex="-1"><a class="header-anchor" href="#_3、复制算法"><span>3、复制算法</span></a></h3><p>复制算法的核心思想是：</p><p>1.准备两块空间From空间和To空间，每次在对象分配阶段，只能使用其中一块空间（From空间），对象A首先分配在From空间。</p><p>2.在垃圾回收GC阶段，将From中存活对象复制到To空间。在垃圾回收阶段，如果对象A存活，就将其复制到To空间。然后将From空间直接清空。</p><p>3.将两块空间的From和To名字互换。接下来将两块空间的名称互换，下次依然在From空间上创建对象。</p><p>优点：</p><ul><li>吞吐量高，复制算法只需要遍历一次存活对象复制到To空间即可，比标记-整理算法少了一次遍历的过程，因而性能较好，但是不如标记-清除算法，因为标记清除算法不需要进行对象的移动</li><li>不会发生碎片化，复制算法在复制之后就会将对象按顺序放入To空间中，所以对象以外的区域都是可用空间，不存在碎片化内存空间。</li></ul><p>缺点：</p><p>内存使用效率低，每次只能让一半的内存空间来为创建对象使用。</p><h3 id="_4、标记整理算法" tabindex="-1"><a class="header-anchor" href="#_4、标记整理算法"><span>4、标记整理算法</span></a></h3><p>标记整理算法也叫标记压缩算法，是对标记清理算法中容易产生内存碎片问题的一种解决方案。</p><p>核心思想分为两个阶段：</p><p>1.标记阶段，将所有存活的对象进行标记。Java中使用可达性分析算法，从GC Root开始通过引用链遍历出所有存活对象。</p><p>2.整理阶段，将存活对象移动到堆的一端。清理掉存活对象的内存空间。</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>优点：</p><ul><li>内存使用效率高，整个堆内存都可以使用，不会像复制算法只能使用半个堆内存</li><li>不会发生碎片化，在整理阶段可以将对象往内存的一侧进行移动，剩下的空间都是可以分配对象的有效空间</li></ul><p>缺点：</p><p>整理阶段的效率不高，整理算法有很多种，比如Lisp2整理算法需要对整个堆中的对象搜索3次，整体性能不佳。可以通过Two-Finger、表格算法、ImmixGC等高效的整理算法优化此阶段的性能。</p><h3 id="_5、分代垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#_5、分代垃圾回收算法"><span>5、分代垃圾回收算法</span></a></h3><p>现代优秀的垃圾回收算法，会将上述描述的垃圾回收算法组合进行使用，其中应用最广的就是分代垃圾回收算法(Generational GC)。</p><p>分代垃圾回收将整个内存区域划分为年轻代和老年代：</p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在JDK8中，添加<code>-XX:+UseSerialGC</code>参数使用分代回收的垃圾回收器。</p><p><strong>流程：</strong></p><ul><li><p>1、分代回收时，创建出来的对象，首先会被放入Eden伊甸园区。</p></li><li><p>2、随着对象在Eden区越来越多，如果Eden区满，新创建的对象已经无法放入，就会触发年轻代的GC，称为Minor GC或者Young GC。</p><ul><li>Minor GC会把需要eden中和From需要回收的对象回收，把没有回收的对象放入To区。</li></ul></li><li><p>3、接下来，S0会变成To区，S1变成From区。当eden区满时再往里放入对象，依然会发生Minor GC。此时会回收eden区和S1(from)中的对象，并把eden和from区中剩余的对象放入S0。</p><ul><li>注意：每次Minor GC中都会为对象记录他的年龄，初始值为0，每次GC完加1。</li></ul></li><li><p>4、如果Minor GC后对象的年龄达到阈值（最大15，默认值和垃圾回收器有关），对象就会被晋升至老年代。</p><ul><li>当老年代中空间不足，无法放入新的对象时，先尝试minor gc如果还是不足，就会触发Full GC，Full GC会对整个堆进行垃圾回收。</li><li>如果Full GC依然无法回收掉老年代的对象，那么当对象继续放入老年代时，就会抛出Out Of Memory异常。</li></ul></li></ul><h2 id="四、垃圾回收器" tabindex="-1"><a class="header-anchor" href="#四、垃圾回收器"><span>四、垃圾回收器</span></a></h2><p>为什么分代GC算法要把堆分成年轻代和老年代？首先我们要知道堆内存中对象的两个分代假说</p><ul><li>弱分代假说：绝大多数哦对象都是朝生夕灭的；</li><li>强分代假说：熬过越多次垃圾收集过程的对象就越难以消灭</li></ul><p>分代GC算法将堆分成年轻代和老年代主要原因有：</p><p>1、可以通过<strong>调整年轻代和老年代的比例</strong>来适应不同类型的应用程序，提高内存的利用率和性能。</p><p>2、<strong>新生代和老年代使用不同的垃圾回收算法</strong>，新生代一般选择复制算法，老年代可以选择标记-清除和标记-整理算法，由程序员来选择灵活度较高。</p><p>3、分代的设计中允许只回收新生代（minor gc），如果能满足对象分配的要求就不需要对整个堆进行回收(full gc),STW时间就会减少。</p><p>垃圾回收器是垃圾回收算法的具体实现，由于垃圾回收器分为年轻代和老年代，除了G1之外其他垃圾回收器必须成对组合进行使用。</p><p>具体的关系图如下：</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1、年轻代-serial垃圾回收器" tabindex="-1"><a class="header-anchor" href="#_1、年轻代-serial垃圾回收器"><span>1、年轻代-Serial垃圾回收器</span></a></h3><p>Serial是是一种单线程串行回收年轻代的垃圾回收器。</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>回收年代和算法：</strong> 年轻代，复制算法</p><p><strong>优点</strong> ：单CPU处理器下吞吐量非常出色</p><p><strong>缺点</strong> ：多CPU下吞吐量不如其他垃圾回收器，堆如果偏大会让用户线程处于长时间的等待</p><p><strong>适用场景</strong> ：Java编写的客户端程序或者硬件配置有限的场景</p><h3 id="_2、老年代-serialold垃圾回收器" tabindex="-1"><a class="header-anchor" href="#_2、老年代-serialold垃圾回收器"><span>2、老年代-SerialOld垃圾回收器</span></a></h3><p>SerialOld是Serial垃圾回收器的老年代版本，采用单线程串行回收</p><p><code>-XX:+UseSerialGC</code> 新生代、老年代都使用串行回收器。</p><p><strong>回收年代和算法：</strong> 老年代，标记-整理算法</p><p><strong>优点</strong> ：单CPU处理器下吞吐量非常出色</p><p><strong>缺点</strong> ：多CPU下吞吐量不如其他垃圾回收器，堆如果偏大会让用户线程处于长时间的等待</p><p><strong>适用场景</strong> ：与Serial垃圾回收器搭配使用，或者在CMS特殊情况下使用</p><h3 id="_3、年轻代-parnew垃圾回收器" tabindex="-1"><a class="header-anchor" href="#_3、年轻代-parnew垃圾回收器"><span>3、年轻代-ParNew垃圾回收器</span></a></h3><p>ParNew垃圾回收器本质上是对Serial在多CPU下的优化，使用多线程进行垃圾回收</p><p><code>-XX:+UseParNewGC</code> 新生代使用ParNew回收器， 老年代使用串行回收器</p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>回收年代和算法：</strong> 年轻代，复制算法</p><p><strong>优点</strong> 多CPU处理器下停顿时间较短</p><p><strong>缺点</strong> 吞吐量和停顿时间不如G1，所以在JDK9之后不建议使用</p><p><strong>适用场景</strong> JDK8及之前的版本中，与CMS老年代垃圾回收器搭配使用</p><h3 id="_4、老年代-cms-concurrent-mark-sweep-垃圾回收器" tabindex="-1"><a class="header-anchor" href="#_4、老年代-cms-concurrent-mark-sweep-垃圾回收器"><span>4、老年代- CMS(Concurrent Mark Sweep)垃圾回收器</span></a></h3><p>CMS垃圾回收器关注的是系统的暂停时间，允许用户线程和垃圾回收线程在某些步骤中同时执行，减少了用户线程的等待时间。</p><p>参数：<code>XX:+UseConcMarkSweepGC</code></p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>回收年代和算法：</strong> 老年代，标记清除算法</p><p><strong>优点</strong> 系统由于垃圾回收出现的停顿时间较短，用户体验好</p><p><strong>适用场景</strong> 大型的互联网系统中用户请求数据量大、频率高的场景，比如订单接口、商品接口等</p><p><strong>CMS执行步骤：</strong></p><ul><li><p>1.初始标记，用极短的时间标记出GC Roots能直接关联到的对象。</p></li><li><p>2.并发标记, 标记所有的对象，用户线程不需要暂停。</p></li><li><p>3.重新标记，由于并发标记阶段有些对象会发生了变化，存在错标、漏标等情况，需要重新标记。</p></li><li><p>4.并发清理，清理死亡的对象，用户线程不需要暂停。</p></li></ul><p><strong>缺点：</strong></p><ul><li><p>1、CMS使用了标记-清除算法，在垃圾收集结束之后会出现大量的内存碎片，CMS会在Full GC时进行碎片的整理。这样会导致用户线程暂停，可以使用<code>-XX:CMSFullGCsBeforeCompaction=N </code>参数（默认0）调整N次Full GC之后再整理。</p></li><li><p>2.、无法处理在并发清理过程中产生的“浮动垃圾”，不能做到完全的垃圾回收。</p></li><li><p>3、如果老年代内存不足无法分配对象，CMS就会退化成Serial Old单线程回收老年代。</p></li></ul><p><strong>并发线程数：</strong></p><p>在CMS中并发阶段运行时的线程数可以通过<code>-XX:ConcGCThreads</code>参数设置，默认值为0，由系统计算得出。</p><p>计算公式为<code>(-XX:ParallelGCThreads定义的线程数 + 3) / 4</code>， <code>ParallelGCThreads</code>是STW停顿之后的并行线程数</p><p><code>ParallelGCThreads</code>是由处理器核数决定的：</p><ul><li><p>1、当cpu核数小于8时，ParallelGCThreads = CPU核数</p></li><li><p>2、否则 <code>ParallelGCThreads = 8 + (CPU核数 – 8 )*5/8 </code></p></li></ul><h3 id="_5、年轻代-parallel-scavenge垃圾回收器" tabindex="-1"><a class="header-anchor" href="#_5、年轻代-parallel-scavenge垃圾回收器"><span>5、年轻代-Parallel Scavenge垃圾回收器</span></a></h3><p>Parallel Scavenge是JDK8默认的年轻代垃圾回收器，多线程并行回收，<strong>关注的是系统的吞吐量。具备自动调整堆内存大小的特点。</strong></p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>回收年代和算法：</strong> 年轻代，复制算法</p><p><strong>优点</strong> 吞吐量高，而且手动可控。为了提高吞吐量，虚拟机会动态调整堆的参数</p><p><strong>缺点</strong> 不能保证单次的停顿时间</p><p><strong>适用场景</strong> 后台任务，不需要与用户交互，并且容易产生大量的对象。比如：大数据的处理，大文件导出</p><p><strong>常用参数：</strong></p><p>Parallel Scavenge允许手动设置最大暂停时间和吞吐量。Oracle官方建议在使用这个组合时，不要设置堆内存的最大值，垃圾回收器会根据最大暂停时间和吞吐量自动调整内存大小。</p><ul><li>最大暂停时间，<code>-XX:MaxGCPauseMillis=n</code> 设置每次垃圾回收时的最大停顿毫秒数</li><li>吞吐量，<code>-XX:GCTimeRatio=n</code> 设置吞吐量为n（用户线程执行时间 = n/n + 1）</li><li>自动调整内存大小, <code>-XX:+UseAdaptiveSizePolicy</code>设置可以让垃圾回收器根据吞吐量和最大停顿的毫秒数自动调整内存大小</li></ul><h3 id="_6、老年代-parallel-old垃圾回收器" tabindex="-1"><a class="header-anchor" href="#_6、老年代-parallel-old垃圾回收器"><span>6、老年代-Parallel Old垃圾回收器</span></a></h3><p>Parallel Old是为Parallel Scavenge收集器设计的老年代版本，利用多线程并发收集。</p><p>参数： <code>-XX:+UseParallelGC</code> 或</p><p>​ <code>-XX:+UseParallelOldGC</code>可以使用<code>Parallel Scavenge</code> + <code>Parallel Old</code>这种组合。</p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>回收年代和算法：</strong> 老年代,标记-整理算法</p><p><strong>优点</strong> 并发收集，在多核CPU下效率较高</p><p><strong>缺点</strong> 暂停时间会比较长</p><p><strong>适用场景</strong> 与Parallel Scavenge配套使用</p><h3 id="_7、g1垃圾回收器" tabindex="-1"><a class="header-anchor" href="#_7、g1垃圾回收器"><span>7、G1垃圾回收器</span></a></h3><p>JDK9之后默认的垃圾回收器是G1（Garbage First）垃圾回收器。<strong>Parallel Scavenge关注吞吐量，允许用户设置最大暂停时间 ，但是会减少年轻代可用空间的大小。CMS关注暂停时间，但是吞吐量方面会下降。</strong></p><p>而G1设计目标就是将上述两种垃圾回收器的优点融合：</p><ul><li><p>1.支持巨大的堆空间回收，并有较高的吞吐量。</p></li><li><p>2.支持多CPU并行垃圾回收。</p></li><li><p>3.允许用户设置最大暂停时间。</p></li></ul><p>JDK9之后强烈建议使用G1垃圾回收器。G1出现之前的垃圾回收器，年轻代和老年代一般是连续的，如下图：</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>G1的整个堆会被划分成多个大小相等的区域，称之为区Region，区域不要求是连续的。分为Eden、Survivor、Old区。Region的大小通过堆空间大小/2048计算得到，也可以通过参数<code>-XX:G1HeapRegionSize=32m</code>指定(其中32m指定region大小为32M)，Region size必须是2的指数幂，取值范围从1M到32M。</p><figure><img src="'+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>G1垃圾回收有两种方式：</p><ul><li><p>1、年轻代回收（Young GC）</p></li><li><p>2、混合回收（Mixed GC）</p></li></ul><p><strong>年轻代回收</strong></p><p>年轻代回收（Young GC），回收Eden区和Survivor区中不用的对象。会导致STW，G1中可以通过参数<code>-XX:MaxGCPauseMillis=n</code>（默认200） 设置每次垃圾回收时的最大暂停时间毫秒数，G1垃圾回收器会尽可能地保证暂停时间。</p><ul><li><p>1、新创建的对象会存放在Eden区。当G1判断年轻代区不足（max默认60%），无法分配对象时需要回收时会执行Young GC。</p></li><li><p>2、标记出Eden和Survivor区域中的存活对象，</p></li><li><p>3、根据配置的最大暂停时间选择某些区域将存活对象复制到一个新的Survivor区中（年龄+1），清空这些区域。</p><ul><li>G1在进行Young GC的过程中会去记录每次垃圾回收时每个Eden区和Survivor区的平均耗时，以作为下次回收时的参考依据。这样就可以根据配置的最大暂停时间计算出本次回收时最多能回收多少个Region区域了。</li><li>比如 <code>-XX:MaxGCPauseMillis=n</code>（默认200），每个Region回收耗时40ms，那么这次回收最多只能回收4个Region。</li></ul></li><li><p>4、后续Young GC时与之前相同，只不过Survivor区中存活对象会被搬运到另一个Survivor区。</p></li><li><p>5、当某个存活对象的年龄到达阈值（默认15），将被放入老年代。</p></li><li><p>6、部分对象如果大小超过Region的一半，会直接放入老年代，这类老年代被称为Humongous区。比如堆内存是4G，每个Region是2M，只要一个大对象超过了1M就被放入Humongous区，如果对象过大会横跨多个Region。</p></li><li><p>7、多次回收之后，会出现很多Old老年代区，此时总堆占有率达到阈值时（<code>-XX:InitiatingHeapOccupancyPercent</code>默认45%）会触发混合回收MixedGC。回收所有年轻代和部分老年代的对象以及大对象区。采用复制算法来完成。</p></li></ul><p><strong>混合回收</strong></p><p>混合回收分为：初始标记（initial mark）、并发标记（concurrent mark）、最终标记（remark或者Finalize Marking）、并发清理（cleanup）</p><p>G1对老年代的清理会选择存活度最低的区域来进行回收，这样可以保证回收效率最高，这也是G1（Garbage first）名称的由来。</p><figure><img src="'+G+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>::: warning注意</p><p>如果清理过程中发现没有足够的空Region存放转移的对象，会出现Full GC。单线程执行标记-整理算法，此时会导致用户线程的暂停。所以尽量保证应该用的堆内存有一定多余的空间。</p><p>:::</p><p><strong>G1 – Garbage First 垃圾回收器</strong></p><p>参数1： <code>-XX:+UseG1GC</code> 打开G1的开关，JDK9之后默认不需要打开</p><p>参数2：<code>-XX:MaxGCPauseMillis=毫秒值</code> 最大暂停的时</p><p><strong>回收年代和算法：</strong> 年轻代+老年代，复制算法</p><p><strong>优点</strong></p><ul><li><p>对比较大的堆如超过6G的堆回收时，延迟可控</p></li><li><p>不会产生内存碎片</p></li><li><p>并发标记的SATB算法效率高</p></li></ul><p><strong>缺点</strong> JDK8之前还不够成熟</p><p><strong>适用场景</strong> JDK8最新版本、JDK9之后建议默认使用</p>',198);function z(J,w){return p(),l("div",null,[j,y,x,R,P,M,T,a(" more "),X])}const F=n(S,[["render",z],["__file","5_垃圾回收.html.vue"]]),A=JSON.parse('{"path":"/posts/%E5%90%8E%E7%AB%AF/Java/5_%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.html","title":"垃圾回收","lang":"zh-CN","frontmatter":{"title":"垃圾回收","date":"2024-10-16T10:24:22.000Z","tags":"java","category":"Java","icon":"/img/JVM.svg","order":5,"description":"一、方法区回收 方法区中能回收的内容主要就是不再使用的类。 判定一个类可以被卸载。需要同时满足下面三个条件： 1、此类所有实例对象都已经被回收，在堆中不存在任何该类的实例对象以及子类对象。 2、加载该类的类加载器已经被回收。 3、该类对应的 java.lang.Class 对象没有在任何地方被引用。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E5%90%8E%E7%AB%AF/Java/5_%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.html"}],["meta",{"property":"og:site_name","content":"Lance"}],["meta",{"property":"og:title","content":"垃圾回收"}],["meta",{"property":"og:description","content":"一、方法区回收 方法区中能回收的内容主要就是不再使用的类。 判定一个类可以被卸载。需要同时满足下面三个条件： 1、此类所有实例对象都已经被回收，在堆中不存在任何该类的实例对象以及子类对象。 2、加载该类的类加载器已经被回收。 3、该类对应的 java.lang.Class 对象没有在任何地方被引用。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/image/jvm/jvm74.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-24T05:28:08.000Z"}],["meta",{"property":"article:author","content":"RuyiWei"}],["meta",{"property":"article:published_time","content":"2024-10-16T10:24:22.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-24T05:28:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"垃圾回收\\",\\"image\\":[\\"https://mister-hope.github.io/image/jvm/jvm74.png\\",\\"https://mister-hope.github.io/image/jvm/jvm75.png\\",\\"https://mister-hope.github.io/image/jvm/jvm76.png\\",\\"https://mister-hope.github.io/image/jvm/jvm77.png\\",\\"https://mister-hope.github.io/image/jvm/jvm78.png\\",\\"https://mister-hope.github.io/image/jvm/jvm79.png\\",\\"https://mister-hope.github.io/image/jvm/jvm80.png\\",\\"https://mister-hope.github.io/image/jvm/jvm81.png\\",\\"https://mister-hope.github.io/image/jvm/jvm82.png\\",\\"https://mister-hope.github.io/image/jvm/jvm83.png\\",\\"https://mister-hope.github.io/image/jvm/jvm84.png\\",\\"https://mister-hope.github.io/image/jvm/jvm85.png\\",\\"https://mister-hope.github.io/image/jvm/jvm86.png\\",\\"https://mister-hope.github.io/image/jvm/jvm85.png\\",\\"https://mister-hope.github.io/image/jvm/jvm85.png\\",\\"https://mister-hope.github.io/image/jvm/jvm87.png\\",\\"https://mister-hope.github.io/image/jvm/jvm88.png\\",\\"https://mister-hope.github.io/image/jvm/jvm89.png\\"],\\"datePublished\\":\\"2024-10-16T10:24:22.000Z\\",\\"dateModified\\":\\"2024-10-24T05:28:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"RuyiWei\\"}]}"]]},"headers":[{"level":2,"title":"一、方法区回收","slug":"一、方法区回收","link":"#一、方法区回收","children":[]},{"level":2,"title":"二、如何判断对象可以回收","slug":"二、如何判断对象可以回收","link":"#二、如何判断对象可以回收","children":[{"level":3,"title":"1、引用计数法","slug":"_1、引用计数法","link":"#_1、引用计数法","children":[]},{"level":3,"title":"2、可达性分析法","slug":"_2、可达性分析法","link":"#_2、可达性分析法","children":[]},{"level":3,"title":"3、常见的引用对象","slug":"_3、常见的引用对象","link":"#_3、常见的引用对象","children":[]}]},{"level":2,"title":"三、垃圾回收算法","slug":"三、垃圾回收算法","link":"#三、垃圾回收算法","children":[{"level":3,"title":"1、垃圾回收算法的评价标准","slug":"_1、垃圾回收算法的评价标准","link":"#_1、垃圾回收算法的评价标准","children":[]},{"level":3,"title":"2、标记清除算法","slug":"_2、标记清除算法","link":"#_2、标记清除算法","children":[]},{"level":3,"title":"3、复制算法","slug":"_3、复制算法","link":"#_3、复制算法","children":[]},{"level":3,"title":"4、标记整理算法","slug":"_4、标记整理算法","link":"#_4、标记整理算法","children":[]},{"level":3,"title":"5、分代垃圾回收算法","slug":"_5、分代垃圾回收算法","link":"#_5、分代垃圾回收算法","children":[]}]},{"level":2,"title":"四、垃圾回收器","slug":"四、垃圾回收器","link":"#四、垃圾回收器","children":[{"level":3,"title":"1、年轻代-Serial垃圾回收器","slug":"_1、年轻代-serial垃圾回收器","link":"#_1、年轻代-serial垃圾回收器","children":[]},{"level":3,"title":"2、老年代-SerialOld垃圾回收器","slug":"_2、老年代-serialold垃圾回收器","link":"#_2、老年代-serialold垃圾回收器","children":[]},{"level":3,"title":"3、年轻代-ParNew垃圾回收器","slug":"_3、年轻代-parnew垃圾回收器","link":"#_3、年轻代-parnew垃圾回收器","children":[]},{"level":3,"title":"4、老年代- CMS(Concurrent Mark Sweep)垃圾回收器","slug":"_4、老年代-cms-concurrent-mark-sweep-垃圾回收器","link":"#_4、老年代-cms-concurrent-mark-sweep-垃圾回收器","children":[]},{"level":3,"title":"5、年轻代-Parallel Scavenge垃圾回收器","slug":"_5、年轻代-parallel-scavenge垃圾回收器","link":"#_5、年轻代-parallel-scavenge垃圾回收器","children":[]},{"level":3,"title":"6、老年代-Parallel Old垃圾回收器","slug":"_6、老年代-parallel-old垃圾回收器","link":"#_6、老年代-parallel-old垃圾回收器","children":[]},{"level":3,"title":"7、G1垃圾回收器","slug":"_7、g1垃圾回收器","link":"#_7、g1垃圾回收器","children":[]}]}],"git":{"createdTime":1729056045000,"updatedTime":1729747688000,"contributors":[{"name":"weiruyi","email":"1581778251@qq.com","commits":2}]},"readingTime":{"minutes":22.68,"words":6805},"filePathRelative":"posts/后端/Java/5_垃圾回收.md","localizedDate":"2024年10月16日","excerpt":"\\n<h2>一、方法区回收</h2>\\n<p>方法区中能回收的内容主要就是不再使用的类。</p>\\n<p>判定一个类可以被卸载。需要同时满足下面三个条件：</p>\\n<p>1、此类所有实例对象都已经被回收，在堆中不存在任何该类的实例对象以及子类对象。</p>\\n<p>2、加载该类的类加载器已经被回收。</p>\\n<p>3、该类对应的 java.lang.Class 对象没有在任何地方被引用。</p>\\n","autoDesc":true}');export{F as comp,A as data};
