import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as e,b as t}from"./app-D4JuwxXz.js";const n="/image/jvm/jvm9.png",p="/image/jvm/jvm10.png",s="/image/jvm/jvm11.png",r="/image/jvm/jvm12.png",o="/image/jvm/jvm13.png",g="/image/jvm/jvm14.png",m="/image/jvm/jvm15.png",l="/image/jvm/jvm16.png",c="/image/jvm/jvm17.png",d="/image/jvm/jvm18.png",h="/image/jvm/jvm19.png",v="/image/jvm/jvm22.png",u="/image/jvm/jvm23.png",f="/image/jvm/jvm24.png",b="/image/jvm/jvm25.png",j="/image/jvm/jvm26.png",_="/image/jvm/jvm27.png",y="/image/jvm/jvm28.png",x="/image/jvm/jvm29.png",J="/image/jvm/jvm30.png",z="/image/jvm/jvm20.png",A="/image/jvm/jvm21.png",D={},E=t('<h1 id="字节码文件" tabindex="-1"><a class="header-anchor" href="#字节码文件"><span>字节码文件</span></a></h1><h2 id="一、-字节码文件的组成" tabindex="-1"><a class="header-anchor" href="#一、-字节码文件的组成"><span>一、 字节码文件的组成</span></a></h2><h3 id="_1、-打开字节码文件" tabindex="-1"><a class="header-anchor" href="#_1、-打开字节码文件"><span>1、 打开字节码文件</span></a></h3><p>字节码文件中保存了源代码编译之后的内容，以二进制的方式存储，无法直接用记事本打开阅读。通过NotePad++使用十六进制插件查看class文件：</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>无法解读出文件里包含的内容，推荐使用<code> jclasslib</code>工具查看字节码文件。<a href="https://github.com/ingokegel/jclasslib" target="_blank" rel="noopener noreferrer">Github地址</a></p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2、字节码文件的组成" tabindex="-1"><a class="header-anchor" href="#_2、字节码文件的组成"><span>2、字节码文件的组成</span></a></h3><p>字节码文件总共可以分为以下几个部分：</p><ul><li><strong>基础信息</strong>：魔数、字节码文件对应的Java版本号、访问标识(public final等等)、父类和接口信息</li><li><strong>常量池</strong> ： 保存了字符串常量、类或接口名、字段名，主要在字节码指令中使用</li><li><strong>字段：</strong> 当前类或接口声明的字段信息</li><li><strong>方法：</strong> 当前类或接口声明的方法信息，核心内容为方法的字节码指令</li><li><strong>属性：</strong> 类的属性，比如源码的文件名、内部类的列表等</li></ul><h4 id="_1-基本信息" tabindex="-1"><a class="header-anchor" href="#_1-基本信息"><span>1） 基本信息</span></a></h4><p>基本信息包含了jclasslib中能看到的两块内容：</p><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>Magic魔数</strong></p><p>每个Java字节码文件的前四个字节是固定的，用16进制表示就是0xcafebabe。文件是无法通过文件扩展名来确定文件类型的，文件扩展名可以随意修改不影响文件的内容。软件会使用文件的头几个字节（文件头）去校验文件的类型，如果软件不支持该种类型就会出错。</p><p>比如常见的文件格式校验方式如下：</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Java字节码文件中，将文件头称为magic魔数。Java虚拟机会校验字节码文件的前四个字节是不是<code>0xcafebabe</code>，如果不是，该字节码文件就无法正常使用，Java虚拟机会抛出对应的错误。</p><p><strong>主副版本号</strong></p><p>主副版本号指的是编译字节码文件时使用的JDK版本号，主版本号用来标识大版本号，JDK1.0-1.1使用了45.0-45.3，JDK1.2是46之后每升级一个大版本就加1；副版本号是当主版本号相同时作为区分不同版本的标识，一般只需要关心主版本号。</p><p>1.2之后大版本号计算方法就是 : 主版本号 – 44，比如主版本号52就是JDK8。</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>版本号的作用主要是判断当前字节码的版本和运行时的JDK是否兼容。如果使用较低版本的JDK去运行较高版本JDK的字节码文件，会报错。</p><p>有两种方案：</p><p>1.升级JDK版本，将图中使用的JDK6升级至JDK8即可正常运行，容易引发其他的兼容性问题，并且需要大量的测试。</p><p>2.将第三方依赖的版本号降低或者更换依赖，以满足JDK版本的要求。建议使用这种方案</p><p><strong>其他基础信息</strong></p><p>其他基础信息包括访问标识、类和接口索引，如下：</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-常量池" tabindex="-1"><a class="header-anchor" href="#_2-常量池"><span>2） 常量池</span></a></h4><p>字节码文件中常量池的作用：避免相同的内容重复定义，节省空间。如下图，常量池中定义了一个字符串，字符串的字面量值为123。</p><figure><img src="'+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>比如在代码中，编写了两个相同的字符串“我爱北京天安门”，字节码文件甚至将来在内存中使用时其实只需要保存一份，此时就可以将这个字符串以及字符串里边包含的字面量，放入常量池中以达到节省空间的作用。</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>String str1 = &quot;我爱北京天安门&quot;;
String str2 = &quot;我爱北京天安门&quot;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>常量池中的数据都有一个编号，编号从1开始。比如“我爱北京天安门”这个字符串，在常量池中的编号就是7。在字段或者字节码指令中通过编号7可以快速的找到这个字符串。</p><p>字节码指令中通过编号引用到常量池的过程称之为符号引用。</p><figure><img src="`+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-字段" tabindex="-1"><a class="header-anchor" href="#_3-字段"><span>3）字段</span></a></h4><p>字段中存放的是当前类或接口声明的字段信息。</p><p>如下图中，定义了两个字段a1和a2，这两个字段就会出现在字段这部分内容中。同时还包含字段的名字、描述符（字段的类型）、访问标识（public/private static final等）。</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_4-方法" tabindex="-1"><a class="header-anchor" href="#_4-方法"><span>4）方法</span></a></h4><p>字节码中的方法区域是存放<strong>字节码指令</strong> 的核心位置，字节码指令的内容存放在方法的Code属性中。</p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过分析方法的字节码指令，可以清楚地了解一个方法到底是如何执行的。先来看如下案例：</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>int i = 0;
int j = i + 1;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码编译成字节码指令之后是如下内容：</p><figure><img src="`+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>要理解这段字节码指令是如何执行的，我们需要先理解两块内存区域：操作数栈和局部变量表。</p><p><strong>操作数栈</strong>是用来存放临时数据的内容，是一个栈式的结构，先进后出。</p><p><strong>局部变量表</strong> 是存放方法中的局部变量，包含方法的参数、方法中定义的局部变量，在编译期就已经可以确定方法有多少个局部变量。</p><p>1、iconst_0，将常量0放入操作数栈。此时栈上只有0。</p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>2、istore_1会从操作数栈中，将栈顶的元素弹出来，此时0会被弹出，放入局部变量表的1号位置。局部变量表中的1号位置，在编译时就已经确定是局部变量i使用的位置。完成了对局部变量i的赋值操作。</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>3、iload_1将局部变量表1号位置的数据放入操作数栈中，此时栈中会放入0。</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>4、iconst_1会将常量1放入操作数栈中。</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>5、iadd会将操作数栈顶部的两个数据相加，现在操作数栈上有两个数0和1，相加之后结果为1放入操作数栈中，此时栈上只有一个数也就是相加的结果1。</p><figure><img src="'+j+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>6、istore_2从操作数栈中将1弹出，并放入局部变量表的2号位置，2号位置是j在使用。完成了对局部变量j的赋值操作。</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>7、return语句执行，方法结束并返回。</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>i++和++i的字节码指令执行的步骤:</strong></p><p>i++的字节码指令如下，其中iinc 1 by 1指令指的是将局部变量表1号位置增加1，其实就实现了i++的操作。</p><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>而++i只是对两个字节码指令的顺序进行了更改：</p><figure><img src="'+J+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>问：int i = 0; i = i++; 最终i的值是多少？</p><p>答：答案是0，我通过分析字节码指令发现，i++先把0取出来放入临时的操作数栈中，</p><p>接下来对i进行加1，i变成了1，最后再将之前保存的临时值0放入i，最后i就变成了0。</p></div><h4 id="_5-属性" tabindex="-1"><a class="header-anchor" href="#_5-属性"><span>5） 属性</span></a></h4><p>属性主要指的是类的属性，比如源码的文件名、内部类的列表等。</p><figure><img src="'+z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3、-字节码常用工具" tabindex="-1"><a class="header-anchor" href="#_3、-字节码常用工具"><span>3、 字节码常用工具</span></a></h3><h4 id="_1、-javap" tabindex="-1"><a class="header-anchor" href="#_1、-javap"><span>1、 javap</span></a></h4><p>javap是JDK自带的反编译工具，可以通过控制台查看字节码文件的内容。适合在服务器上查看字节码文件内容。</p><p>直接输入javap查看所有参数。输入<code>javap -v字节码文件名称</code> 查看具体的字节码信息。如果jar包需要先使用 <code>jar –xvf</code> 命令解压。</p><h4 id="_2、-jclasslib插件" tabindex="-1"><a class="header-anchor" href="#_2、-jclasslib插件"><span>2、 jclasslib插件</span></a></h4><p>jclasslib也有Idea插件版本，建议开发时使用Idea插件版本，可以在代码编译之后实时看到字节码文件内容。</p><p>选中要查看的源代码文件，选择 视图(View) - Show Bytecode With Jclasslib，右侧会展示对应源代码编译后的字节码文件内容：</p><blockquote><p>tips:</p><p>1、一定要选择文件再点击视图(view)菜单，否则菜单项不会出现。</p><p>2、文件修改后一定要重新编译之后，再点击刷新按钮。</p></blockquote><h4 id="_3、-arthas" tabindex="-1"><a class="header-anchor" href="#_3、-arthas"><span>3、 Arthas</span></a></h4><p>Arthas 是一款线上监控诊断产品，通过全局视角实时查看应用 load、内存、gc、线程的状态信息，并能在不修改应用代码的情况下，对业务问题进行诊断，大大提升线上问题排查效率。<a href="https://arthas.aliyun.com/doc/" target="_blank" rel="noopener noreferrer">官网</a>， Arthas的功能列表如下：</p><figure><img src="'+A+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>使用方法：</strong></p><ol><li>使用<code>java -jar arthas-boot.jar </code> 启动程序。</li><li>输入需要Arthas监控的进程id。</li><li>输入命令即可使用。</li></ol><p><strong>dump</strong></p><p>命令详解：<a href="https://arthas.aliyun.com/doc/dump.html" target="_blank" rel="noopener noreferrer">https://arthas.aliyun.com/doc/dump.html</a></p><p>dump命令可以将字节码文件保存到本地，如下将<code>java.lang.String</code> 的字节码文件保存到了/tmp/output目录下：</p><div class="language-Bash line-numbers-mode" data-ext="Bash" data-title="Bash"><pre class="language-Bash"><code>$ dump -d /tmp/output java.lang.String

 HASHCODE  CLASSLOADER  LOCATION
 null                   /tmp/output/java/lang/String.class
Affect(row-cnt:1) cost in 138 ms.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>jad</strong></p><p>命令详解：<a href="https://arthas.aliyun.com/doc/jad.html" target="_blank" rel="noopener noreferrer">https://arthas.aliyun.com/doc/jad.html</a></p><p>jad命令可以将类的字节码文件进行反编译成源代码，用于确认服务器上的字节码文件是否是最新的，如下将demo.MathGame的源代码进行了显示。</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>$ jad --source-only demo.MathGame
/*
 * Decompiled with CFR 0_132.
 */
package demo;

import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.concurrent.TimeUnit;

public class MathGame {
    private static Random random = new Random();
    public int illegalArgumentCount = 0;
...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,95),k=[E];function B(K,S){return e(),a("div",null,k)}const q=i(D,[["render",B],["__file","2-字节码文件.html.vue"]]),w=JSON.parse('{"path":"/posts/%E5%90%8E%E7%AB%AF/Java/2-%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6.html","title":"字节码文件","lang":"zh-CN","frontmatter":{"title":"字节码文件","date":"2024-09-08T16:30:22.000Z","tags":"java","category":"Java","order":2,"icon":"/img/JVM.svg","description":"字节码文件 一、 字节码文件的组成 1、 打开字节码文件 字节码文件中保存了源代码编译之后的内容，以二进制的方式存储，无法直接用记事本打开阅读。通过NotePad++使用十六进制插件查看class文件： 无法解读出文件里包含的内容，推荐使用 jclasslib工具查看字节码文件。Github地址 2、字节码文件的组成 字节码文件总共可以分为以下几个部分...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E5%90%8E%E7%AB%AF/Java/2-%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6.html"}],["meta",{"property":"og:site_name","content":"Lance"}],["meta",{"property":"og:title","content":"字节码文件"}],["meta",{"property":"og:description","content":"字节码文件 一、 字节码文件的组成 1、 打开字节码文件 字节码文件中保存了源代码编译之后的内容，以二进制的方式存储，无法直接用记事本打开阅读。通过NotePad++使用十六进制插件查看class文件： 无法解读出文件里包含的内容，推荐使用 jclasslib工具查看字节码文件。Github地址 2、字节码文件的组成 字节码文件总共可以分为以下几个部分..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/image\\\\jvm\\\\jvm9.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-08T08:01:25.000Z"}],["meta",{"property":"article:author","content":"RuyiWei"}],["meta",{"property":"article:published_time","content":"2024-09-08T16:30:22.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-08T08:01:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"字节码文件\\",\\"image\\":[\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm9.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm10.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm11.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm12.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm13.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm14.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm15.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm16.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm17.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm18.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm19.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm22.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm23.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm24.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm25.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm26.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm27.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm28.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm29.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm30.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm20.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm21.png\\"],\\"datePublished\\":\\"2024-09-08T16:30:22.000Z\\",\\"dateModified\\":\\"2024-09-08T08:01:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"RuyiWei\\"}]}"]]},"headers":[{"level":2,"title":"一、 字节码文件的组成","slug":"一、-字节码文件的组成","link":"#一、-字节码文件的组成","children":[{"level":3,"title":"1、 打开字节码文件","slug":"_1、-打开字节码文件","link":"#_1、-打开字节码文件","children":[]},{"level":3,"title":"2、字节码文件的组成","slug":"_2、字节码文件的组成","link":"#_2、字节码文件的组成","children":[]},{"level":3,"title":"3、 字节码常用工具","slug":"_3、-字节码常用工具","link":"#_3、-字节码常用工具","children":[]}]}],"git":{"createdTime":1725782485000,"updatedTime":1725782485000,"contributors":[{"name":"weiruyi","email":"1581778251@qq.com","commits":1}]},"readingTime":{"minutes":8.03,"words":2408},"filePathRelative":"posts/后端/Java/2-字节码文件.md","localizedDate":"2024年9月8日","excerpt":"\\n<h2>一、 字节码文件的组成</h2>\\n<h3>1、 打开字节码文件</h3>\\n<p>字节码文件中保存了源代码编译之后的内容，以二进制的方式存储，无法直接用记事本打开阅读。通过NotePad++使用十六进制插件查看class文件：</p>\\n<figure><img src=\\"/image\\\\jvm\\\\jvm9.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<p>无法解读出文件里包含的内容，推荐使用<code> jclasslib</code>工具查看字节码文件。<a href=\\"https://github.com/ingokegel/jclasslib\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Github地址</a></p>","autoDesc":true}');export{q as comp,w as data};
