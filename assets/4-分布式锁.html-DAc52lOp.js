import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,b as a}from"./app-BV-HOy2U.js";const t="/image/jvm/jvm69.png",i="/image/jvm/jvm70.png",o="/image/jvm/jvm71.png",l="/image/jvm/jvm72.png",c="/image/jvm/jvm73.png",p={},d=a(`<h1 id="分布式锁" tabindex="-1"><a class="header-anchor" href="#分布式锁"><span>分布式锁</span></a></h1><h2 id="一、分布式锁" tabindex="-1"><a class="header-anchor" href="#一、分布式锁"><span>一、分布式锁</span></a></h2><h3 id="_1、介绍" tabindex="-1"><a class="header-anchor" href="#_1、介绍"><span>1、介绍</span></a></h3><p>在多线程环境下，为了保证数据的线程安全，<strong>锁保证同一时刻，只有一个可以访问和更新共享数据</strong>。在单机系统我们可以使用<code>synchronized</code>锁或者<code>Lock</code>锁保证线程安全。<code>synchronized</code>锁是<code>Java</code>提供的一种内置锁，在单个<code>JVM</code>进程中提供线程之间的锁定机制，控制多线程并发，只适用于单机环境下的并发控制，但是如果想要锁定多个节点服务，<code>synchronized</code>就不适用于了，想要在多个节点中提供锁定，在分布式系统并发控制共享资源，确保同一时刻只有一个访问可以调用，避免多个调用者竞争调用和数据不一致问题，保证<strong>数据的一致性</strong>。</p><blockquote><p>分布式锁就是<strong>控制分布式系统不同进程访问共享资源</strong>的一种锁的机制。不同进程之间调用需要保持<strong>互斥性</strong>，任意时刻，只有一个客户端能持有锁。</p></blockquote><p>从单体锁到分布式锁，只不过是将锁的对象从一个进程的多个线程，转成多个进程。</p><h3 id="_2、特性" tabindex="-1"><a class="header-anchor" href="#_2、特性"><span>2、特性</span></a></h3><ol><li><strong>互斥性</strong></li></ol><ul><li>分布式锁最基本的特性，同一时刻只能一个节点服务拥有该锁，当有节点获取锁之后，其他节点无法获取锁，不同节点之间具有互斥性。</li></ul><ol start="2"><li><strong>超时机制</strong></li></ol><ul><li><p>不考虑异常，正常情况下，请求获取锁之后，处理任务，处理完成之后释放锁。但是如果在处理任务发生服务异常，或者网络异常时，导致锁无法释放。其他请求都无法获取锁，变成死锁。</p></li><li><p>为了防止锁变成死锁，需要设置锁的超时时间。过了超时时间后，锁自动释放，其他请求能正常获取锁。</p></li></ul><ol start="3"><li><strong>自动续期</strong></li></ol><ul><li><p>锁设置了超时机制后，如果持有锁的节点处理任务的时候过长超过了超时时间，就会发生线程未处理完任务锁就被释放了，其他线程就能获取到该锁，导致多个节点同时访问共享资源。对此，就需要延长超时时间。</p></li><li><p>开启一个监听线程，定时监听任务，监听任务线程还存活就延长超时时间。当任务完成、或者任务发生异常就不继续延长超时时间。</p></li></ul><h3 id="_3、实现" tabindex="-1"><a class="header-anchor" href="#_3、实现"><span>3、实现</span></a></h3><p>实现分布式锁的方案有很多，常用的如下：</p><p><strong>1、基于数据库实现分布锁</strong></p><ul><li>利用数据库主键唯一性的特点，或利用数据库唯一索引、行级锁的特点，比如：多个线程同时向数据库插入主键相同的同一条记录，谁插入成功谁就获取锁，多个线程同时去更新相同的记录，谁更新成功谁就抢到锁。</li></ul><p><strong>2、基于redis实现锁</strong></p><ul><li><p>redis提供了分布式锁的实现方案，比如：SETNX、set nx、redisson等。</p></li><li><p>拿SETNX举例说明，SETNX命令的工作过程是去set一个不存在的key，多个线程去设置同一个key只会有一个线程设置成功，设置成功的的线程拿到锁。</p></li></ul><p><strong>3、使用zookeeper实现</strong></p><ul><li>zookeeper是一个分布式协调服务，主要解决分布式程序之间的同步的问题。zookeeper的结构类似的文件目录，多线程向zookeeper创建一个子目录(节点)只会有一个创建成功，利用此特点可以实现分布式锁，谁创建该结点成功谁就获得锁。</li></ul><h2 id="二、实现案例" tabindex="-1"><a class="header-anchor" href="#二、实现案例"><span>二、实现案例</span></a></h2><h3 id="_1、数据库实现" tabindex="-1"><a class="header-anchor" href="#_1、数据库实现"><span>1、数据库实现</span></a></h3><p>下边基于数据库方式实现分布锁，开始执行任务将任务执行状态更新为4表示任务执行中。</p><p>下边的sql语句可以实现更新操作：</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>update media_process m set m.status=&#39;4&#39; where  m.id=?
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是多个线程去执行该sql都将会执行成功，但需求是只能有一个线程抢到锁，所以此sql无法满足需求。</p><p>使用乐观锁方式实现更新操作：</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>update media_process m set m.status=&#39;4&#39; where (m.status=&#39;1&#39; or m.status=&#39;3&#39;) and m.fail_count&lt;3 and m.id=?
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>多个线程同时执行上边的sql只会有一个线程执行成功。</p><div class="hint-container tip"><p class="hint-container-title">什么是乐观锁、悲观锁？</p><p>synchronized是一种悲观锁，在执行被synchronized包裹的代码时需要首先获取锁，没有拿到锁则无法执行，是总悲观的认为别的线程会去抢，所以要悲观锁。</p><p>乐观锁的思想是它不认为会有线程去争抢，尽管去执行，如果没有执行成功就再去重试。</p></div><p>数据库的乐观锁实现方式是在表中增加一个version字段，更新时判断是否等于某个版本，等于则更新否则更新失败，如下方式。</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>update t1 set t1.data1 = &#39;&#39;,t1.version=&#39;2&#39; where t1.version=&#39;1&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2、mysql使用for-update实现" tabindex="-1"><a class="header-anchor" href="#_2、mysql使用for-update实现"><span>2、Mysql使用<code>for update</code>实现</span></a></h3><p><code>Mysql</code>数据库可以使用<code>select xxx for update</code>来实现分布式锁。</p><p><code>for update</code>是一种<strong>行级锁</strong>，也叫<strong>排它锁</strong>。如果一条<code>select</code>语句后面加上<code>for update</code>,其他事务可以读取，但不能进进行更新操作。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>store <span class="token keyword">from</span> t_product <span class="token keyword">where</span> id <span class="token operator">=</span> xxx <span class="token keyword">for</span> <span class="token keyword">update</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>使用<code>for update</code>行级锁可以实现分布式锁，通过行级锁锁住库存，<strong><code>where</code>后条件一定要走索引，不然会触发表锁，会降低<code>MySQL</code>的性能</strong>。</p><p>不过基于<code>MySQL</code>实现的分布式锁，存在性能瓶颈，在<code>Repeatable read</code>隔离级别下<code>select for update</code>操作是基于<strong>间隙锁</strong>实现，这是一种悲观锁，会存在线程阻塞问题。</p><p>当有大量的线程请求的情况下，大部分请求会被阻塞等待，后续的请求只能等前面的请求结束后，才能排队进来处理。</p></div><h3 id="_3、zookeeper-实现分布式锁" tabindex="-1"><a class="header-anchor" href="#_3、zookeeper-实现分布式锁"><span>3、Zookeeper 实现分布式锁</span></a></h3><p>数据库实现分布式锁存在性能瓶颈，无法支撑高并发的请求。可以使用<code>Zookeeper</code>实现分布式锁，<code>Zookeeper</code>提供一种<code>分布式服务协调</code>的中心化服务，而分布式锁的实现是基于<code>Zookeeper</code>的两个特性。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>1、顺序临时节点:</strong></p><ul><li><p><code>Zookeeper</code> 数据模型<code>znode</code>是以多层节点命名的空间，每个节点都用斜杠<code>/</code>分开的路径来表示，类似文件系统的目录。</p></li><li><p>节点类型分成<strong>持久节点</strong>和<strong>临时节点</strong>，每个节点还可以标记有序性。一旦节点被标记为有序性，那整个节点就有自动递增的特点。利用以上的特性，<strong>创建一个持久节点作为父节点，在父节点下面创建一个临时节点，并标记该临时节点为有序性</strong>。</p></li></ul><p><strong>2、Watch 机制:</strong></p><ul><li><code>Zookeeper</code> 还提供了另一个重要的特性：<code>Watch</code>(事件监听器)，在指定节点的上注册监听事件。当事件触发时，会将事件通知给对应的客户。</li></ul></div><p><strong>了解了<code>Zookeeper</code>的两个特性之后，那如何使用这两种特性来实现分布式锁呢？</strong></p><p>首先，创建一个持久类型的父节点，当用户请求时，就在父节点创建临时类型的子节点，并标记临时节点为有序性。</p><p>建立子节点之后，对父节点下面所有临时节点进行排序，判断刚创建的临时节点是否是最小的节点，如果是最小的节点，就获取锁。如果不最小的节点，则等待锁，并且获取该节点上一个顺序节点，并为其注册监听事件，等待触发事件并获得锁。</p><p>当请求完毕后，删除该节点，并触发监听事件，下一个顺序节点获得锁，流程如下所示</p><figure><img src="`+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>curator</code>将上面实现分布式锁的思路封装好了，直接调用即可。</p><p>引入<code>curator</code>依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>curator-recipes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>InterProcessMutex</code>分布式可重入排它锁,一般流程如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>InterProcessMutex <span class="token keyword">lock</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InterProcessMutex</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> lockPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 加锁</span>
interProcessMutex<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 执行代码xxxxxxx</span>
<span class="token comment">// 解锁</span>
interProcessMutex<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>interProcessMutex</code>获取锁和释放锁:</p><ul><li>获取锁 <code>interProcessMutex.acquire()</code></li><li>释放锁 <code>interProcessMutex.release()</code></li></ul><p>为了避免每次请求都要创建<code>InterProcessMutex</code>实例，创建<code>InterProcessMutex</code>的<code>bean</code>:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">String</span> address <span class="token operator">=</span> <span class="token string">&quot;xxxxx&quot;</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">InterProcessMutex</span> <span class="token function">interProcessMutex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">CuratorFramework</span> zkClient <span class="token operator">=</span> <span class="token function">getZkClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> lockPath <span class="token operator">=</span> <span class="token string">&quot;/lock&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">InterProcessMutex</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InterProcessMutex</span><span class="token punctuation">(</span>zkClient<span class="token punctuation">,</span>lockPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> lock<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">CuratorFramework</span> <span class="token function">getZkClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ExponentialBackoffRetry</span> retry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExponentialBackoffRetry</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CuratorFramework</span> zkClient <span class="token operator">=</span> <span class="token class-name">CuratorFrameworkFactory</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">connectString</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">sessionTimeoutMs</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">connectionTimeoutMs</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">retryPolicy</span><span class="token punctuation">(</span>retry<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    zkClient<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> zkClient<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果获取锁之后，系统发生异常，系统就一直持有锁，后续请求也无法获取锁，导致死锁。需要设置锁超时机制，<code>interProcessMutex.acquire</code>添加超时时间：</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code>interProcessMutex.<span class="token function">acquire</span><span class="token punctuation">(</span>watiTime<span class="token punctuation">,</span>TimeUnit<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>超时时间设置要根据业务执行时间来设定，不能太长，也不能太短。</p><div class="hint-container info"><p class="hint-container-title">Zookeeper一些特点</p><ul><li><code>Zookeeper</code>实现的分布式锁，相对数据库，性能有很大的提高。</li><li><code>Zookeeper</code>配置集群，发生单点故障时、或者系统挂掉时，临时节点会因为 session 连接断开而自动删除。</li><li>频繁的创建和删除节点，并且每个节点都有<code>watch</code>事件，对<code>Zookeeper</code>服务来说压力大。相对<code>Redis</code>的性能，还存在差距。</li></ul></div><h3 id="_4、redis-nx实现分布式锁" tabindex="-1"><a class="header-anchor" href="#_4、redis-nx实现分布式锁"><span>4、Redis NX实现分布式锁</span></a></h3><p>redis实现分布式锁的方案可以在redis.cn网站查阅，<a href="http://www.redis.cn/commands/set.html" target="_blank" rel="noopener noreferrer">地址</a></p><p>使用命令： <code>SET resource-name anystring NX EX max-lock-time</code> 即可实现。</p><ul><li><p>NX：表示key不存在才设置成功。</p></li><li><p>EX：设置过期时间</p></li></ul><p><strong>如何在代码中使用Set nx去实现分布锁呢？</strong></p><p>使用spring-boot-starter-data-redis 提供的api即可实现set nx。</p><p>添加依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加依赖后，在bean中注入restTemplate。</p><p>我们先分析一段伪代码如下：</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>if(缓存中有){

  返回缓存中的数据
}else{

  获取分布式锁
  if(获取锁成功）{
       try{
         查询数据库
      }finally{
         释放锁
      }
  }
 
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>1、获取分布式锁</strong></p><p>使用<code>redisTemplate.opsForValue().setIfAbsent(key,vaue)</code>获取锁</p><p>这里考虑一个问题，当<code>set nx</code>一个<code>key/value</code>成功1后，这个key(就是锁)需要设置过期时间吗？如果不设置过期时间当获取到了锁却没有执行finally这个锁将会一直存在，其它线程无法获取这个锁。所以执行set nx时要指定过期时间，即使用如下的命令</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>SET resource-name anystring NX EX max-lock-time
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>具体调用的方法是：<code>redisTemplate.opsForValue().setIfAbsent(K var1, V var2, long var3, TimeUnit var5)</code></p><p><strong>2、如何释放锁</strong></p><p>释放锁分为两种情况：key到期自动释放，手动删除。</p><ul><li>1）key到期自动释放的方法</li></ul><p>因为锁设置了过期时间，key到期会自动释放，但是会存在一个问题就是 <strong>查询数据库等操作还没有执行完时key到期了</strong>，此时其它线程就抢到锁了，最终重复查询数据库执行了重复的业务操作。</p><p><strong>怎么解决这个问题？</strong></p><p>可以将key的到期时间设置的长一些，足以执行完成查询数据库并设置缓存等相关操作。如果这样效率会低一些，另外这个时间值也不好把控。</p><ul><li>2）手动删除锁</li></ul><p>如果是采用手动删除锁可能和key到期自动删除有所冲突，造成删除了别人的锁。</p><p>比如：当查询数据库等业务还没有执行完时key过期了，此时其它线程占用了锁，当上一个线程执行查询数据库等业务操作完成后手动删除锁就把其它线程的锁给删除了。</p><p>要解决这个问题可以采用删除锁之前判断是不是自己设置的锁，伪代码如下：</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript" data-title="JavaScript"><pre class="language-JavaScript"><code>if(缓存中有){

  返回缓存中的数据
}else{

  获取分布式锁: set lock 01 NX
  if(获取锁成功）{
       try{
         查询数据库
      }finally{
         if(redis.call(&quot;get&quot;,&quot;lock&quot;)==&quot;01&quot;){
            释放锁: redis.call(&quot;del&quot;,&quot;lock&quot;)
         }
         
      }
  }
 
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码第11行到13行非原子性，也会导致删除其它线程的锁。</p><p>查看文档上的说明：http://www.redis.cn/commands/set.html</p><figure><img src="`+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在调用setnx命令设置key/value时，每个线程设置不一样的value值，这样当线程去删除锁时可以先根据key查询出来判断是不是自己当时设置的vlaue，如果是则删除。<strong>这整个操作是原子的，实现方法就是去执行上边的lua脚本。</strong></p><p><em>Lua</em> 是一个小巧的脚本语言，redis在2.6版本就支持通过执行Lua脚本保证多个命令的原子性。</p><h3 id="_5、redisson实现分布式锁" tabindex="-1"><a class="header-anchor" href="#_5、redisson实现分布式锁"><span>5、Redisson实现分布式锁</span></a></h3><p>我们选用Java的实现方案 https://github.com/redisson/redisson</p><p>Redisson的文档地址：https://github.com/redisson/redisson/wiki/Table-of-Content</p><p>Redisson底层采用的是<a href="http://netty.io/" target="_blank" rel="noopener noreferrer">Netty</a> 框架。支持<a href="http://redis.cn/" target="_blank" rel="noopener noreferrer">Redis</a> 2.8以上版本，支持Java1.6+以上版本。Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务。其中包括(<code>BitSet</code>, <code>Set</code>, <code>Multimap</code>, <code>SortedSet</code>, <code>Map</code>, <code>List</code>, <code>Queue</code>, <code>BlockingQueue</code>, <code>Deque</code>, <code>BlockingDeque</code>, <code>Semaphore</code>, <code>Lock</code>, <code>AtomicLong</code>, <code>CountDownLatch</code>, <code>Publish / Subscribe</code>, <code>Bloom filter</code>, <code>Remote service</code>, <code>Spring cache</code>, <code>Executor service</code>, <code>Live Object service</code>, <code>Scheduler service</code>) 。</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>使用Redisson可以非常方便将Java本地内存中的常用数据结构的对象搬到分布式缓存redis中。</p></li><li><p>也可以将常用的并发编程工具如：AtomicLong、CountDownLatch、Semaphore等支持分布式。</p></li><li><p>使用RScheduledExecutorService 实现分布式调度服务。</p></li><li><p>支持数据分片，将数据分片存储到不同的redis实例中。</p></li><li><p>支持分布式锁，基于Java的Lock接口实现分布式锁，方便开发。</p></li></ul><p>下边使用Redisson将Queue队列的数据存入Redis，实现一个排队及出队的接口。</p><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>添加redisson的依赖</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.redisson&lt;/groupId&gt;
    &lt;artifactId&gt;redisson-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;3.11.2&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从课程资料目录拷贝singleServerConfig.yaml到config工程下</p><p>在redis配置文件中添加：</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>spring:
  redis:
    redisson:
      #配置文件目录
      config: classpath:singleServerConfig.yaml
      #config: classpath:clusterServersConfig.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>redis集群配置clusterServersConfig.yaml.</p><p>Redisson相比set nx实现分布式锁要简单的多，工作原理如下：</p><figure><img src="`+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><strong>加锁机制</strong></li></ul><p>线程去获取锁，获取成功: 执行lua脚本，保存数据到redis数据库。</p><p>线程去获取锁，获取失败: 一直通过while循环尝试获取锁，获取成功后，执行lua脚本，保存数据到redis</p><ul><li><strong>WatchDog自动延期看门狗机制</strong></li></ul><p>第一种情况：在一个分布式环境下，假如一个线程获得锁后，突然服务器宕机了，那么这个时候在一定时间后这个锁会自动释放，你也可以设置锁的有效时间(当不设置默认30秒时），这样的目的主要是防止死锁的发生</p><p>第二种情况：线程A业务还没有执行完，时间就过了，线程A 还想持有锁的话，就会启动一个watch dog后台线程，不断的延长锁key的生存时间。</p><ul><li><strong>lua脚本-保证原子性操作</strong></li></ul><p>主要是如果你的业务逻辑复杂的话，通过封装在lua脚本中发送给redis，而且redis是单线程的，这样就保证这段复杂业务逻辑执行的原子性</p><p>具体使用RLock操作分布锁，RLock继承JDK的Lock接口，所以他有Lock接口的所有特性，比如lock、unlock、trylock等特性,同时它还有很多新特性：强制锁释放，带有效期的锁,。</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>public interface RRLock {
    
   //----------------------Lock接口方法-----------------------
    /**
     * 加锁 锁的有效期默认30秒
     */
    void lock();
    
     /**
     * 加锁 可以手动设置锁的有效时间
     *
     * @param leaseTime 锁有效时间
     * @param unit      时间单位 小时、分、秒、毫秒等
     */
    void lock(long leaseTime, TimeUnit unit);
    
    /**
     * tryLock()方法是有返回值的，用来尝试获取锁，
     * 如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false .
     */
    boolean tryLock();
    
    /**
     * tryLock(long time, TimeUnit unit)方法和tryLock()方法是类似的，
     * 只不过区别在于这个方法在拿不到锁时会等待一定的时间，
     * 在时间期限之内如果还拿不到锁，就返回false。如果如果一开始拿到锁或者在等待期间内拿到了锁，则返回true。
     *
     * @param time 等待时间
     * @param unit 时间单位 小时、分、秒、毫秒等
     */
    boolean tryLock(long time, TimeUnit unit) throws InterruptedException;
    
    /**
     * 比上面多一个参数，多添加一个锁的有效时间
     *
     * @param waitTime  等待时间
     * @param leaseTime 锁有效时间
     * @param unit      时间单位 小时、分、秒、毫秒等
     * waitTime 大于 leaseTime
     */
    boolean tryLock(long waitTime, long leaseTime, TimeUnit unit) throws InterruptedException;
    
    /**
     * 解锁
     */
    void unlock();
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>lock()</strong>：</p><ul><li>此方法为加锁，但是锁的有效期采用<strong>默认30秒</strong></li><li>如果主线程未释放，且当前锁未调用unlock方法，则进入到<strong>watchDog机制</strong></li><li>如果主线程未释放，且当前锁调用unlock方法，则直接释放锁</li></ul>`,119),r=[d];function u(v,m){return e(),s("div",null,r)}const b=n(p,[["render",u],["__file","4-分布式锁.html.vue"]]),h=JSON.parse('{"path":"/posts/%E5%90%8E%E7%AB%AF/Java/4-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html","title":"分布式锁","lang":"zh-CN","frontmatter":{"title":"分布式锁","date":"2024-10-10T14:47:22.000Z","tags":"后端","category":"后端","icon":"/img/lock.svg","order":4,"description":"分布式锁 一、分布式锁 1、介绍 在多线程环境下，为了保证数据的线程安全，锁保证同一时刻，只有一个可以访问和更新共享数据。在单机系统我们可以使用synchronized锁或者Lock锁保证线程安全。synchronized锁是Java提供的一种内置锁，在单个JVM进程中提供线程之间的锁定机制，控制多线程并发，只适用于单机环境下的并发控制，但是如果想要锁...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E5%90%8E%E7%AB%AF/Java/4-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html"}],["meta",{"property":"og:site_name","content":"Lance"}],["meta",{"property":"og:title","content":"分布式锁"}],["meta",{"property":"og:description","content":"分布式锁 一、分布式锁 1、介绍 在多线程环境下，为了保证数据的线程安全，锁保证同一时刻，只有一个可以访问和更新共享数据。在单机系统我们可以使用synchronized锁或者Lock锁保证线程安全。synchronized锁是Java提供的一种内置锁，在单个JVM进程中提供线程之间的锁定机制，控制多线程并发，只适用于单机环境下的并发控制，但是如果想要锁..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/image\\\\jvm\\\\jvm69.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-24T05:28:08.000Z"}],["meta",{"property":"article:author","content":"RuyiWei"}],["meta",{"property":"article:published_time","content":"2024-10-10T14:47:22.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-24T05:28:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式锁\\",\\"image\\":[\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm69.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm70.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm71.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm72.png\\",\\"https://mister-hope.github.io/image\\\\\\\\jvm\\\\\\\\jvm73.png\\"],\\"datePublished\\":\\"2024-10-10T14:47:22.000Z\\",\\"dateModified\\":\\"2024-10-24T05:28:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"RuyiWei\\"}]}"]]},"headers":[{"level":2,"title":"一、分布式锁","slug":"一、分布式锁","link":"#一、分布式锁","children":[{"level":3,"title":"1、介绍","slug":"_1、介绍","link":"#_1、介绍","children":[]},{"level":3,"title":"2、特性","slug":"_2、特性","link":"#_2、特性","children":[]},{"level":3,"title":"3、实现","slug":"_3、实现","link":"#_3、实现","children":[]}]},{"level":2,"title":"二、实现案例","slug":"二、实现案例","link":"#二、实现案例","children":[{"level":3,"title":"1、数据库实现","slug":"_1、数据库实现","link":"#_1、数据库实现","children":[]},{"level":3,"title":"2、Mysql使用for update实现","slug":"_2、mysql使用for-update实现","link":"#_2、mysql使用for-update实现","children":[]},{"level":3,"title":"3、Zookeeper 实现分布式锁","slug":"_3、zookeeper-实现分布式锁","link":"#_3、zookeeper-实现分布式锁","children":[]},{"level":3,"title":"4、Redis NX实现分布式锁","slug":"_4、redis-nx实现分布式锁","link":"#_4、redis-nx实现分布式锁","children":[]},{"level":3,"title":"5、Redisson实现分布式锁","slug":"_5、redisson实现分布式锁","link":"#_5、redisson实现分布式锁","children":[]}]}],"git":{"createdTime":1728962506000,"updatedTime":1729747688000,"contributors":[{"name":"weiruyi","email":"1581778251@qq.com","commits":2}]},"readingTime":{"minutes":14.4,"words":4319},"filePathRelative":"posts/后端/Java/4-分布式锁.md","localizedDate":"2024年10月10日","excerpt":"\\n<h2>一、分布式锁</h2>\\n<h3>1、介绍</h3>\\n<p>在多线程环境下，为了保证数据的线程安全，<strong>锁保证同一时刻，只有一个可以访问和更新共享数据</strong>。在单机系统我们可以使用<code>synchronized</code>锁或者<code>Lock</code>锁保证线程安全。<code>synchronized</code>锁是<code>Java</code>提供的一种内置锁，在单个<code>JVM</code>进程中提供线程之间的锁定机制，控制多线程并发，只适用于单机环境下的并发控制，但是如果想要锁定多个节点服务，<code>synchronized</code>就不适用于了，想要在多个节点中提供锁定，在分布式系统并发控制共享资源，确保同一时刻只有一个访问可以调用，避免多个调用者竞争调用和数据不一致问题，保证<strong>数据的一致性</strong>。</p>","autoDesc":true}');export{b as comp,h as data};
